
tablke of contents

main header
              .....
         .d$$$$*$$$$$$bc
      .d$P"    d$$    "*$$.
     d$"      4$"$$      "$$.
   4$P   /    $F ^$F    /   "$c
  z$%        d$   3$        ^$L
 4$$$$$$$$$$$$$$$$$$$$$$$$$$$$$F
 $$$F"""""""$F""""""$F"""""C$$*$
.$%"$$e    d$       3$   z$$"  $F
4$    *$$.4$"        $$d$P"    $$
4$      ^*$$.       .d$F       $$
4$   /   d$"$$c   z$$"3$    /  $F
 $L     4$"  ^*$$$P"   $$     4$"
 3$     $F   .d$P$$e   ^$F    $P
  $$   d$  .$$"    "$$c 3$   d$
   *$.4$"z$$"        ^*$$$$ $$
    "$$$$P"     /       "$$$P
      *$b.             .d$P"
        "$$$ec.....ze$$$"
            "**$$$**""


subsection
              v
       \             /

          _________
 `       /         \      '
        /  \     /  \
       /             \
_     /   _ _ . _ _   \    _
      \               /
       \             /
        \  /     \  /
 '       \_________/      `


       /             \
              ^

subsection
  --------------------
  / ~~~~~     ~~~~~ \
 /|     |     |\
 W   ---  / \  ---   W
 \.      |o o|      ./
  |                 |
  \    #########    /
   \  ## ----- ##  /
    \##         ##/
    ---------------


subsection
      -"""-.__
     /    '  \
    ;  '.  :  c
    "\._ ) ::-"
       ""m "

tips

   __   _
 _(  )_( )_
(_   _    _)
  (_) (__)

subsection
  
qoOop
(===)
"""""



installation

              .....
         .d$$$$*$$$$$$bc
      .d$P"    d$$    "*$$.
     d$"      4$"$$      "$$.
   4$P   /    $F ^$F    /   "$c
  z$%        d$   3$        ^$L
 4$$$$$$$$$$$$$$$$$$$$$$$$$$$$$F
 $$$F"""""""$F""""""$F"""""C$$*$
.$%"$$e    d$       3$   z$$"  $F
4$    *$$.4$"        $$d$P"    $$
4$      ^*$$.       .d$F       $$
4$   /   d$"$$c   z$$"3$    /  $F
 $L     4$"  ^*$$$P"   $$     4$"
 3$     $F   .d$P$$e   ^$F    $P
  $$   d$  .$$"    "$$c 3$   d$
   *$.4$"z$$"        ^*$$$$ $$
    "$$$$P"     /       "$$$P
      *$b.             .d$P"
        "$$$ec.....ze$$$"
            "**$$$**""


npm install --save-dev jasmine

https://github.com/jasmine/jasmine-npm

to initalize

              v
       \             /

          _________
 `       /         \      '
        /  \     /  \
       /             \
_     /   _ _ . _ _   \    _
      \               /
       \             /
        \  /     \  /
 '       \_________/      `


       /             \
              ^

npx jasmine init
node_modules/.bin/jasmine init



to give your project examples
  --------------------
  / ~~~~~     ~~~~~ \
 /|     |     |\
 W   ---  / \  ---   W
 \.      |o o|      ./
  |                 |
  \    #########    /
   \  ## ----- ##  /
    \##         ##/
    ---------------

npx jasnime examples


to run it
  --------------------
  / ~~~~~     ~~~~~ \
 /|     |     |\
 W   ---  / \  ---   W
 \.      |o o|      ./
  |                 |
  \    #########    /
   \  ## ----- ##  /
    \##         ##/
    ---------------


npx jasmine




Configuration

              v
       \             /

          _________
 `       /         \      '
        /  \     /  \
       /             \
_     /   _ _ . _ _   \    _
      \               /
       \             /
        \  /     \  /
 '       \_________/      `


       /             \
              ^

located at spec/support/jasmine.json

alternatively

jasmine JASMINE_CONFIG_PATH=relative/path/to/your/jasmine.json
jasmine --config=relative/path/to/your/jasmine.json


Filtering specs

              v
       \             /

          _________
 `       /         \      '
        /  \     /  \
       /             \
_     /   _ _ . _ _   \    _
      \               /
       \             /
        \  /     \  /
 '       \_________/      `


       /             \
              ^

Execute only those specs which filename match given glob:

jasmine "spec/**/critical/*Spec.js"
Or a single file:

jasmine spec/currentSpec.js
Or execute only those specs which name matches a particular regex:

jasmine --filter "adapter21*"
(where the name of a spec is the first parameter passed to describe())




Configuration

              v
       \             /

          _________
 `       /         \      '
        /  \     /  \
       /             \
_     /   _ _ . _ _   \    _
      \               /
       \             /
        \  /     \  /
 '       \_________/      `


       /             \
              ^

known as jasmine.json

so in jasmine all of your tests are known as specs

{
  // Spec directory path relative to the current working dir when jasmine is executed.
  "spec_dir": "spec",

  // Array of filepaths (and globs) relative to spec_dir to include and exclude
  "spec_files": [
    "**/*[sS]pec.js",
    "!**/*nospec.js"
  ],

  // Array of filepaths (and globs) relative to spec_dir to include before jasmine specs
  "helpers": [
    "helpers/**/*.js"
  ],

  // Stop execution of a spec after the first expectation failure in it
  "stopSpecOnExpectationFailure": false,

  // Run specs in semi-random order
  "random": false
}



Running Tests

  --------------------
  / ~~~~~     ~~~~~ \
 /|     |     |\
 W   ---  / \  ---   W
 \.      |o o|      ./
  |                 |
  \    #########    /
   \  ## ----- ##  /
    \##         ##/
    ---------------
node node_modules/jasmine/bin/jasmine.js
npx jasmine


run one test

      -"""-.__
     /    '  \
    ;  '.  :  c
    "\._ ) ::-"
       ""m "

jasmine spec/appSpec.js
jasmine "**/model/**/critical/**/*Spec.js"


CLI Options


  --------------------
  / ~~~~~     ~~~~~ \
 /|     |     |\
 W   ---  / \  ---   W
 \.      |o o|      ./
  |                 |
  \    #########    /
   \  ## ----- ##  /
    \##         ##/
    ---------------

JASMINE_CONFIG_PATH=
Specify a relative or absolute path to your configuration file. Can be used as an option or set as an environment variable.

JASMINE_CONFIG_PATH=spec/config/jasmine.json jasmine

jasmine --config=spec/config/jasmine.json
--no-color
Turns off color in spec output

jasmine --no-color
--filter=
Only runs specs that match the given string

jasmine --filter="a spec name"
--stop-on-failure=[true|false]
Stops execution of a spec after the first expectation failure when set to true

jasmine --stop-on-failure=true
--random=[true|false]
Tells jasmine to run specs in semi random order or not for this run, overriding jasmine.json

jasmine --random=true
--seed=
Sets the randomization seed if randomization is turned on

jasmine --seed=4321
--reporter=
Sets the reporter default reporter implementation. Must be a valid node.js module name and needs installed in your project. If Jasmine-npm cannot load it it will use the default one.

npm i --save-dev jasmine-ts-console-reporter
jasmine --reporter=jasmine-ts-console-reporter




Using jhe library

  --------------------
  / ~~~~~     ~~~~~ \
 /|     |     |\
 W   ---  / \  ---   W
 \.      |o o|      ./
  |                 |
  \    #########    /
   \  ## ----- ##  /
    \##         ##/
    ---------------

if you want granaular control

var Jasmine = require('jasmine');
var jasmine = new Jasmine();


load config file
      -"""-.__
     /    '  \
    ;  '.  :  c
    "\._ ) ::-"
       ""m "

jasmine.loadConfigFile('spec/support/jasmine.json');

jasmine.loadConfig({
    spec_dir: 'spec',
    spec_files: [
        'appSpec.js',
        'requests/**/*[sS]pec.js',
        'utils/**/*[sS]pec.js'
    ],
    helpers: [
        'helpers/**/*.js'
    ]
});



Custom onComplete

      -"""-.__
     /    '  \
    ;  '.  :  c
    "\._ ) ::-"
       ""m "

tells a task runner (karma) whether a spec has completed or not

jasmine.onComplete(function(passed) {
    if(passed) {
        console.log('All specs have passed');
    }
    else {
        console.log('At least one spec has failed');
    }
});



Reporters

      -"""-.__
     /    '  \
    ;  '.  :  c
    "\._ ) ::-"
       ""m "


jasmine.configureDefaultReporter({
    // The `timer` passed to the reporter will determine the mechanism for seeing how long the suite takes to run.
    timer: new jasmine.jasmine.Timer(),
    // The `print` function passed the reporter will be called to print its results.
    print: function() {
        process.stdout.write(arguments);
    },
    // `showColors` determines whether or not the reporter should use ANSI color codes.
    showColors: true
});

A ConsoleReporter is included if no other reporters are added


addReporter

    qoOop
    (===)
    """""

if you add a reporter jasmine will not add the default one


var CustomReporter = require('./myCustomReporter');
var customReporter = new CustomReporter();

jasmine.addReporter(customReporter);


Run the tests

      -"""-.__
     /    '  \
    ;  '.  :  c
    "\._ ) ::-"
       ""m "

jasmine.execute();
jasmine.execute(['fooSpec.js'], 'a spec name');


a simple example

APIjasmine.js





How Jasmine Works

              .....
         .d$$$$*$$$$$$bc
      .d$P"    d$$    "*$$.
     d$"      4$"$$      "$$.
   4$P   /    $F ^$F    /   "$c
  z$%        d$   3$        ^$L
 4$$$$$$$$$$$$$$$$$$$$$$$$$$$$$F
 $$$F"""""""$F""""""$F"""""C$$*$
.$%"$$e    d$       3$   z$$"  $F
4$    *$$.4$"        $$d$P"    $$
4$      ^*$$.       .d$F       $$
4$   /   d$"$$c   z$$"3$    /  $F
 $L     4$"  ^*$$$P"   $$     4$"
 3$     $F   .d$P$$e   ^$F    $P
  $$   d$  .$$"    "$$c 3$   d$
   *$.4$"z$$"        ^*$$$$ $$
    "$$$$P"     /       "$$$P
      *$b.             .d$P"
        "$$$ec.....ze$$$"
            "**$$$**


Your First Suite



              v
       \             /

          _________
 `       /         \      '
        /  \     /  \
       /             \
_     /   _ _ . _ _   \    _
      \               /
       \             /
        \  /     \  /
 '       \_________/      `


       /             \
              ^
              
              
describiing Tests
  --------------------
  / ~~~~~     ~~~~~ \
 /|     |     |\
 W   ---  / \  ---   W
 \.      |o o|      ./
  |                 |
  \    #########    /
   \  ## ----- ##  /
    \##         ##/
    ---------------

describe is for describing a group of related specs

the actual sepc is done by the function it

you concatentate the string in describe and it for meaningful spec names by BDD standards

describe("A suite", function() {
  it("contains spec with an expectation", function() {
    expect(true).toBe(true);
  });
});


Spec

      -"""-.__
     /    '  \
    ;  '.  :  c
    "\._ ) ::-"
       ""m "


generated with an it function
it("contains spec with an expectation", function() {
    ...
});

   __   _
 _(  )_( )_
(_   _    _)
  (_) (__)       the describe and it they are ()=>{}




Expectations

qoOop
(===)
"""""

expect(player).not.toBePlaying(song);

they go inside the spec and takes the actual value of the test
they must coming with a "Matching' A method that takes the expected value of the test


Setup and Teardown

qoOop
(===)
"""""

to remove duplicated setups
check out beforeEach, afterEach, beforeAll, and afterAll " fns


file /home/uoul/My_Computer/Testing/Jasmine/spec/support/spec/jasmine_examples/PlayerSpec.js

the beforeEach function is called once before each spec in the describe in which it is called
the afterEach function is called once after each spec.
The beforeAll function is called only once before all the specs in describe are run
the afterAll function is called after all specs finish in the descibe

use the beforeEach afterEach before calling specs

this keyword

qoOop
(===)
"""""

can pass variable from one spec to another they all have the this

describe("A spec", function() {
  beforeEach(function() {
    this.foo = 0;
  });

  it("can use the `this` to share state", function() {
    expect(this.foo).toEqual(0);
    this.bar = "test pollution?";
  });

  it("prevents test pollution by having an empty `this` created for the next spec", function() {
    expect(this.foo).toEqual(0);
    expect(this.bar).toBe(undefined);
  });
});
 
"
failing a spec

qoOop
(===)
"""""

if you dont know how to make a test fail use the fail function

describe("A spec using the fail function", function() {
  var foo = function(x, callBack) {
    if (x) {
      callBack();
    }
  };

  it("should not call the callBack", function() {
    foo(false, function() {
      fail("Callback has been called");
    });
  });
});
"

you can nest descibes to describe blocks

qoOop
(===)
""""""


Disabling Suites


qoOop
(===)
""""""

to disable a suite use xdescribe, nothing is run in there
their results show as pending


Pending Specs


qoOop
(===)
""""""

any spec  with xit function
any spec without a fn
a pending() in a sepc


     
Spies
      
      
      -"""-.__
     /    '  \
    ;  '.  :  c
    "\._ ) ::-"
       ""m "
a test double fn
stubs any fn and track calls to it and its args
only exists in the desrcibe or it block
you can describe what the spy will do with and()



toHaveBeenCalled

qoOop
(===)
""""""

pass if spy was called



toHaveBeenCalledTimes

qoOop
(===)
""""""

if spy was called a specific # of times


toHaveBeenCalledWith

qoOop
(===)
""""""

retruns true is the fn was called with a certain argument

you can get any information about spy with .calls on the fn being spyed on



Spies: createSpy

qoOop
(===)
""""""

creates a bareSpy with nothing to spy on


Spies: createSpyObj

qoOop
(===)
""""""

if you have seceral fn u want to track use jasmine.createSpyObj





Jasmine API
              .....
         .d$$$$*$$$$$$bc
      .d$P"    d$$    "*$$.
     d$"      4$"$$      "$$.
   4$P   /    $F ^$F    /   "$c
  z$%        d$   3$        ^$L
 4$$$$$$$$$$$$$$$$$$$$$$$$$$$$$F
 $$$F"""""""$F""""""$F"""""C$$*$
.$%"$$e    d$       3$   z$$"  $F
4$    *$$.4$"        $$d$P"    $$
4$      ^*$$.       .d$F       $$
4$   /   d$"$$c   z$$"3$    /  $F
 $L     4$"  ^*$$$P"   $$     4$"
 3$     $F   .d$P$$e   ^$F    $P
  $$   d$  .$$"    "$$c 3$   d$
   *$.4$"z$$"        ^*$$$$ $$
    "$$$$P"     /       "$$$P
      *$b.             .d$P"
        "$$$ec.....ze$$$"
            "**$$$**""

Global

              v
       \             /

          _________
 `       /         \      '
        /  \     /  \
       /             \
_     /   _ _ . _ _   \    _
      \               /
       \             /
        \  /     \  /
 '       \_________/      `


       /             \
              ^

Methods

  --------------------
  / ~~~~~     ~~~~~ \
 /|     |     |\
 W   ---  / \  ---   W
 \.      |o o|      ./
  |                 |
  \    #########    /
   \  ## ----- ##  /
    \##         ##/
    ---------------

