        
        read with LogiQL script
        tablke of contents
        
        main header
                      .....
                 .d$$$$*$$$$$$bc
              .d$P"    d$$    "*$$.
             d$"      4$"$$      "$$.
           4$P   /    $F ^$F    /   "$c
          z$%        d$   3$        ^$L
         4$$$$$$$$$$$$$$$$$$$$$$$$$$$$$F
         $$$F"""""""$F""""""$F"""""C$$*$
        .$%"$$e    d$       3$   z$$"  $F
        4$    *$$.4$"        $$d$P"    $$
        4$      ^*$$.       .d$F       $$
        4$   /   d$"$$c   z$$"3$    /  $F
         $L     4$"  ^*$$$P"   $$     4$"
         3$     $F   .d$P$$e   ^$F    $P
          $$   d$  .$$"    "$$c 3$   d$
           *$.4$"z$$"        ^*$$$$ $$
            "$$$$P"     /       "$$$P
              *$b.             .d$P"
                "$$$ec.....ze$$$"
                    "**$$$**""
        
        
        subsection
                      v
               \             /
        
                  _________
         `       /         \      '
                /  \     /  \
               /             \
        _     /   _ _ . _ _   \    _
              \               /
               \             /
                \  /     \  /
         '       \_________/      `
        
        
               /             \
                      ^
        
        subsection
          --------------------
          / ~~~~~     ~~~~~ \
         /|     |     |\
         W   ---  / \  ---   W
         \.      |o o|      ./
          |                 |
          \    #########    /
           \  ## ----- ##  /
            \##         ##/
            ---------------
        
        
        subsection
              -"""-.__
             /    '  \
            ;  '.  :  c
            "\._ ) ::-"
               ""m "
        
        tips
        
           __   _
         _(  )_( )_
        (_   _    _)
          (_) (__)
        
        subsection
          
        qoOop
        (===)
        """""
        
        
        
        installation
        
                      .....
                 .d$$$$*$$$$$$bc
              .d$P"    d$$    "*$$.
             d$"      4$"$$      "$$.
           4$P   /    $F ^$F    /   "$c
          z$%        d$   3$        ^$L
         4$$$$$$$$$$$$$$$$$$$$$$$$$$$$$F
         $$$F"""""""$F""""""$F"""""C$$*$
        .$%"$$e    d$       3$   z$$"  $F
        4$    *$$.4$"        $$d$P"    $$
        4$      ^*$$.       .d$F       $$
        4$   /   d$"$$c   z$$"3$    /  $F
         $L     4$"  ^*$$$P"   $$     4$"
         3$     $F   .d$P$$e   ^$F    $P
          $$   d$  .$$"    "$$c 3$   d$
           *$.4$"z$$"        ^*$$$$ $$
            "$$$$P"     /       "$$$P
              *$b.             .d$P"
                "$$$ec.....ze$$$"
                    "**$$$**""
        
        
        npm install --save-dev jasmine
        
        https://github.com/jasmine/jasmine-npm
        
        to initalize
        
                      v
               \             /
        
                  _________
         `       /         \      '
                /  \     /  \
               /             \
        _     /   _ _ . _ _   \    _
              \               /
               \             /
                \  /     \  /
         '       \_________/      `
        
        
               /             \
                      ^
        
        npx jasmine init
        node_modules/.bin/jasmine init
        
        
        
        to give your project examples
          --------------------
          / ~~~~~     ~~~~~ \
         /|     |     |\
         W   ---  / \  ---   W
         \.      |o o|      ./
          |                 |
          \    #########    /
           \  ## ----- ##  /
            \##         ##/
            ---------------
        
        npx jasnime examples
        
        
        to run it
          --------------------
          / ~~~~~     ~~~~~ \
         /|     |     |\
         W   ---  / \  ---   W
         \.      |o o|      ./
          |                 |
          \    #########    /
           \  ## ----- ##  /
            \##         ##/
            ---------------
        
        
        npx jasmine
        
        
        
        
        Configuration
        
                      v
               \             /
        
                  _________
         `       /         \      '
                /  \     /  \
               /             \
        _     /   _ _ . _ _   \    _
              \               /
               \             /
                \  /     \  /
         '       \_________/      `
        
        
               /             \
                      ^
        
        located at spec/support/jasmine.json
        
        alternatively
        
        jasmine JASMINE_CONFIG_PATH=relative/path/to/your/jasmine.json
        jasmine --config=relative/path/to/your/jasmine.json
        
        
        Filtering specs
        
                      v
               \             /
        
                  _________
         `       /         \      '
                /  \     /  \
               /             \
        _     /   _ _ . _ _   \    _
              \               /
               \             /
                \  /     \  /
         '       \_________/      `
        
        
               /             \
                      ^
        
        Execute only those specs which filename match given glob:
        
        jasmine "spec/**/critical/*Spec.js"
        Or a single file:
        
        jasmine spec/currentSpec.js
        Or execute only those specs which name matches a particular regex:
        
        jasmine --filter "adapter21*"
        (where the name of a spec is the first parameter passed to describe())
        
        
        
        
        Configuration
        
                      v
               \             /
        
                  _________
         `       /         \      '
                /  \     /  \
               /             \
        _     /   _ _ . _ _   \    _
              \               /
               \             /
                \  /     \  /
         '       \_________/      `
        
        
               /             \
                      ^
        
        known as jasmine.json
        
        so in jasmine all of your tests are known as specs
        
        {
          // Spec directory path relative to the current working dir when jasmine is executed.
          "spec_dir": "spec",
        
          // Array of filepaths (and globs) relative to spec_dir to include and exclude
          "spec_files": [
            "**/*[sS]pec.js",
            "!**/*nospec.js"
          ],
        
          // Array of filepaths (and globs) relative to spec_dir to include before jasmine specs
          "helpers": [
            "helpers/**/*.js"
          ],
        
          // Stop execution of a spec after the first expectation failure in it
          "stopSpecOnExpectationFailure": false,
        
          // Run specs in semi-random order
          "random": false
        }
        
        
        
        Running Tests
        
          --------------------
          / ~~~~~     ~~~~~ \
         /|     |     |\
         W   ---  / \  ---   W
         \.      |o o|      ./
          |                 |
          \    #########    /
           \  ## ----- ##  /
            \##         ##/
            ---------------
        node node_modules/jasmine/bin/jasmine.js
        npx jasmine
        
        
        run one test
        
              -"""-.__
             /    '  \
            ;  '.  :  c
            "\._ ) ::-"
               ""m "
        
        jasmine spec/appSpec.js
        jasmine "**/model/**/critical/**/*Spec.js"
        
        
        CLI Options
        
        
          --------------------
          / ~~~~~     ~~~~~ \
         /|     |     |\
         W   ---  / \  ---   W
         \.      |o o|      ./
          |                 |
          \    #########    /
           \  ## ----- ##  /
            \##         ##/
            ---------------
        
        JASMINE_CONFIG_PATH=
        Specify a relative or absolute path to your configuration file. Can be used as an option or set as an environment variable.
        
        JASMINE_CONFIG_PATH=spec/config/jasmine.json jasmine
        
        jasmine --config=spec/config/jasmine.json
        --no-color
        Turns off color in spec output
        
        jasmine --no-color
        --filter=
        Only runs specs that match the given string
        
        jasmine --filter="a spec name"
        --stop-on-failure=[true|false]
        Stops execution of a spec after the first expectation failure when set to true
        
        jasmine --stop-on-failure=true
        --random=[true|false]
        Tells jasmine to run specs in semi random order or not for this run, overriding jasmine.json
        
        jasmine --random=true
        --seed=
        Sets the randomization seed if randomization is turned on
        
        jasmine --seed=4321
        --reporter=
        Sets the reporter default reporter implementation. Must be a valid node.js module name and needs installed in your project. If Jasmine-npm cannot load it it will use the default one.
        
        npm i --save-dev jasmine-ts-console-reporter
        jasmine --reporter=jasmine-ts-console-reporter
        
        
        
        
        Using jhe library
        
          --------------------
          / ~~~~~     ~~~~~ \
         /|     |     |\
         W   ---  / \  ---   W
         \.      |o o|      ./
          |                 |
          \    #########    /
           \  ## ----- ##  /
            \##         ##/
            ---------------
        
        if you want granaular control
        
        var Jasmine = require('jasmine');
        var jasmine = new Jasmine();
        
        
        load config file
              -"""-.__
             /    '  \
            ;  '.  :  c
            "\._ ) ::-"
               ""m "
        
        jasmine.loadConfigFile('spec/support/jasmine.json');
        
        jasmine.loadConfig({
            spec_dir: 'spec',
            spec_files: [
                'appSpec.js',
                'requests/**/*[sS]pec.js',
                'utils/**/*[sS]pec.js'
            ],
            helpers: [
                'helpers/**/*.js'
            ]
        });
        
        
        
        Custom onComplete
        
              -"""-.__
             /    '  \
            ;  '.  :  c
            "\._ ) ::-"
               ""m "
        
        tells a task runner (karma) whether a spec has completed or not
        
        jasmine.onComplete(function(passed) {
            if(passed) {
                console.log('All specs have passed');
            }
            else {
                console.log('At least one spec has failed');
            }
        });
        
        
        
        Reporters
        
              -"""-.__
             /    '  \
            ;  '.  :  c
            "\._ ) ::-"
               ""m "
        
        
        jasmine.configureDefaultReporter({
            // The `timer` passed to the reporter will determine the mechanism for seeing how long the suite takes to run.
            timer: new jasmine.jasmine.Timer(),
            // The `print` function passed the reporter will be called to print its results.
            print: function() {
                process.stdout.write(arguments);
            },
            // `showColors` determines whether or not the reporter should use ANSI color codes.
            showColors: true
        });
        
        A ConsoleReporter is included if no other reporters are added
        
        
        addReporter
        
            qoOop
            (===)
            """""
        
        if you add a reporter jasmine will not add the default one
        
        
        var CustomReporter = require('./myCustomReporter');
        var customReporter = new CustomReporter();
        
        jasmine.addReporter(customReporter);
        
        
        Run the tests
        
              -"""-.__
             /    '  \
            ;  '.  :  c
            "\._ ) ::-"
               ""m "
        
        jasmine.execute();
        jasmine.execute(['fooSpec.js'], 'a spec name');
        
        
        a simple example
        
        APIjasmine.js
        
        
        
        
        
        How Jasmine Works
        
                      .....
                 .d$$$$*$$$$$$bc
              .d$P"    d$$    "*$$.
             d$"      4$"$$      "$$.
           4$P   /    $F ^$F    /   "$c
          z$%        d$   3$        ^$L
         4$$$$$$$$$$$$$$$$$$$$$$$$$$$$$F
         $$$F"""""""$F""""""$F"""""C$$*$
        .$%"$$e    d$       3$   z$$"  $F
        4$    *$$.4$"        $$d$P"    $$
        4$      ^*$$.       .d$F       $$
        4$   /   d$"$$c   z$$"3$    /  $F
         $L     4$"  ^*$$$P"   $$     4$"
         3$     $F   .d$P$$e   ^$F    $P
          $$   d$  .$$"    "$$c 3$   d$
           *$.4$"z$$"        ^*$$$$ $$
            "$$$$P"     /       "$$$P
              *$b.             .d$P"
                "$$$ec.....ze$$$"
                    "**$$$**
        
        
        Your First Suite
        
        
        
                      v
               \             /
        
                  _________
         `       /         \      '
                /  \     /  \
               /             \
        _     /   _ _ . _ _   \    _
              \               /
               \             /
                \  /     \  /
         '       \_________/      `
        
        
               /             \
                      ^
                      
                      
        describiing Tests
          --------------------
          / ~~~~~     ~~~~~ \
         /|     |     |\
         W   ---  / \  ---   W
         \.      |o o|      ./
          |                 |
          \    #########    /
           \  ## ----- ##  /
            \##         ##/
            ---------------
        
        describe is for describing a group of related specs
        
        the actual sepc is done by the function it
        
        you concatentate the string in describe and it for meaningful spec names by BDD standards
        
        describe("A suite", function() {
          it("contains spec with an expectation", function() {
            expect(true).toBe(true);
          });
        });
        
        
        Spec
        
              -"""-.__
             /    '  \
            ;  '.  :  c
            "\._ ) ::-"
               ""m "
        
        
        generated with an it function
        it("contains spec with an expectation", function() {
            ...
        });
        
           __   _
         _(  )_( )_
        (_   _    _)
          (_) (__)       the describe and it they are ()=>{}
        
        
        
        
        Expectations
        
        qoOop
        (===)
        """""
        
        expect(player).not.toBePlaying(song);
        
        they go inside the spec and takes the actual value of the test
        they must coming with a "Matching' A method that takes the expected value of the test
        
        
        Setup and Teardown
        
        qoOop
        (===)
        """""
        
        to remove duplicated setups
        check out beforeEach, afterEach, beforeAll, and afterAll " fns
        
        
        file /home/uoul/My_Computer/Testing/Jasmine/spec/support/spec/jasmine_examples/PlayerSpec.js
        
        the beforeEach function is called once before each spec in the describe in which it is called
        the afterEach function is called once after each spec.
        The beforeAll function is called only once before all the specs in describe are run
        the afterAll function is called after all specs finish in the descibe
        
        use the beforeEach afterEach before calling specs
        
        this keyword
        
        qoOop
        (===)
        """""
        
        can pass variable from one spec to another they all have the this
        
        describe("A spec", function() {
          beforeEach(function() {
            this.foo = 0;
          });
        
          it("can use the `this` to share state", function() {
            expect(this.foo).toEqual(0);
            this.bar = "test pollution?";
          });
        
          it("prevents test pollution by having an empty `this` created for the next spec", function() {
            expect(this.foo).toEqual(0);
            expect(this.bar).toBe(undefined);
          });
        });
         
        "
        failing a spec
        
        qoOop
        (===)
        """""
        
        if you dont know how to make a test fail use the fail function
        
        describe("A spec using the fail function", function() {
          var foo = function(x, callBack) {
            if (x) {
              callBack();
            }
          };
        
          it("should not call the callBack", function() {
            foo(false, function() {
              fail("Callback has been called");
            });
          });
        });
        "
        
        you can nest descibes to describe blocks
        
        qoOop
        (===)
        """"""
        
        
        Disabling Suites
        
        
        qoOop
        (===)
        """"""
        
        to disable a suite use xdescribe, nothing is run in there
        their results show as pending
        
        
        Pending Specs
        
        
        qoOop
        (===)
        """"""
        
        any spec  with xit function
        any spec without a fn
        a pending() in a sepc
        
        
             
        Spies
              
              
              -"""-.__
             /    '  \
            ;  '.  :  c
            "\._ ) ::-"
               ""m "
        a test double fn
        stubs any fn and track calls to it and its args
        only exists in the desrcibe or it block
        you can describe what the spy will do with and()
        
        
        
        toHaveBeenCalled
        
        qoOop
        (===)
        """"""
        
        pass if spy was called
        
        
        
        toHaveBeenCalledTimes
        
        qoOop
        (===)
        """"""
        
        if spy was called a specific # of times
        
        
        toHaveBeenCalledWith
        
        qoOop
        (===)
        """"""
        
        retruns true is the fn was called with a certain argument
        
        you can get any information about spy with .calls on the fn being spyed on
        
        
        
        Spies: createSpy
        
        qoOop
        (===)
        """"""
        
        creates a bareSpy with nothing to spy on
        
        
        Spies: createSpyObj
        
        qoOop
        (===)
        """"""
        
        if you have seceral fn u want to track use jasmine.createSpyObj
        
        
        
        
        Matching with more finesse
        
              -"""-.__
             /    '  \
            ;  '.  :  c
            "\._ ) ::-"
               ""m "
        
        for not exact equality
        jasmine.any takes technincally a constructor or class
        its jus matching types
        
        qoOop
        (===)
        """"""
        
        jasmine.anything returns true if the actual value is not null or undefined.
        
        
        qoOop
        (===)
        """"""
        
        jasmine.objectContaining is for key value pairs
        
        
        qoOop
        (===)
        """"""
        
        jasmine.arrayContaining for certain values in an array
        
        
        qoOop
        (===)
        """"""
        
        jasmine.stringMatching is regex comp
        
        
        qoOop
        (===)
        """"""
        
        Custom asymmetric equality tester
        
        when you need granaular control of what you need to compare in a test result
        
        
        
        Jasmine Clock
        
              -"""-.__
             /    '  \
            ;  '.  :  c
            "\._ ) ::-"
               ""m "
        
        used for testing and time dependent code
        
        you install it with  jasmine.clock().install
        for  a spec that needs to manipulate time
        
        make sure u unistall it
        
        
        qoOop
        (===)
        """"""
        
        making setTimeout and setInterval sync
        
        make one then use
        jasmine.clock().tick(ms), to literally control time fowward
        when the clock is installed time stands still
        
        
        qoOop
        (===)
        """"""
        
        Mock date
        
        you can use jasmine to mock the current date
        
        
        Asynchronous Support if you have problems refer to the tutorials in your firstt suite its that 3.0 stuff
        
        
              -"""-.__
             /    '  \
            ;  '.  :  c
            "\._ ) ::-"
               ""m "
               
               
         indicate that a function is asynchronous: by taking an optional callback parameter, by returning a promise, or by using the async keyword in environments that support it.
         
         
        async/await
         
        qoOop
        (===)
        """"""
        
        easiest way to deal with async, make an async fn and contain the async work with await which will return as a promise
        supported by jasmine 2.7
        rejected promise will cause a spec failure or suite failure in beforeAll or afterAll
        
        
        Promises
         
        qoOop
        (===)
        """"""
        
        jasmine sees anything with a .then to be a promise so be careful u can use js Promise or one from a library
        
        
        Callbacks
         
        qoOop
        (===)
        """"""
        
        this is error prone
        the fn in a suite or spec will take a done
        its impt that the done is called one and at the end of async work
        a common error is to call done while the test is still running
        
        
        
        Handling failures
         
        qoOop
        (===)
        """"""
        
        failures do not always go to where they belong, sometimes u need to force a spec to fail
        
        failed promises
        
            beforeEach(function() {
              return somePromiseReturningFunction();
            });
            
            it('does a thing', function() {
              // Since `.then` propagates rejections, this test will fail if
              // the promise returned by asyncFunctionThatMightFail is rejected.
              return asyncFunctionThatMightFail().then(function(value) {
                // ...
              });
            });
            
            function somePromiseReturningFunction() {
              return new Promise(function(resolve, reject) {
                if (everythingIsOk()) {
                  resolve();
                } else {
                  reject();
                }
              });
            }
            
            
            
        Failing with async/await
        
                    
            beforeEach(async function() {
              // Will fail if the promise returned by
              // someAsyncFunction is rejected.
              await someAsyncFunction();
            });
            
            it('does a thing', async function() {
              // Will fail if doSomethingThatMightThrow throws.
              doSomethingThatMightThrow();
            
              // Will fail if the promise returned by
              // asyncFunctionThatMightFail is rejected.
              const value = await asyncFunctionThatMightFail();
              // ...
            });
            
            
        Failing with done
            
            2.1 +
            beforeEach(function(done) {
              setTimeout(function() {
                try {
                  riskyThing();
                  done();
                } catch (e) {
                  done.fail(e);
                }
              });
            });
            
            3.0+
            beforeEach(function(done) {
              setTimeout(function() {
                var err = null;
            
                try {
                  riskyThing();
                } catch (e) {
                  err = e;
                }
            
                done(err);
              });
            });
            
         
        Reporters and async
        
        qoOop
        (===)
        """"""
        
        as of jasmine 3.0 reporter event handlers can be async, with done, the callback should be the last parameter
                
        
        Using the mock clock
        
        qoOop
        (===)
        """"""
        
        if an operation is async because of time-based behavior use the mock clock to force it to be synchronous and avoid waiting a long time for tests
                
                
                
        
        Mocking AJAX
          --------------------
          / ~~~~~     ~~~~~ \
         /|     |     |\
         W   ---  / \  ---   W
         \.      |o o|      ./
          |                 |
          \    #########    /
           \  ## ----- ##  /
            \##         ##/
            ---------------
            
            
        Tsting AJAX
              -"""-.__
             /    '  \
            ;  '.  :  c
            "\._ ) ::-"
               ""m "
                   
        
        to use it download mock-ajax.js and  place it in helpers file
        
        
        basic usage across entire suite
              -"""-.__
             /    '  \
            ;  '.  :  c
            "\._ ) ::-"
               ""m "
                   
        
        When you want to mock out all ajax calls across an entire suite, use install() in a beforeEach.
        
        Because jasmine-ajax stubs out the global XMLHttpRequest for the page, you'll want to uninstall() in an afterEach so specs or setup that expect to make a real ajax request can.
        it should mock the XMLHTTPRequest Object
        
        there is a state where we can run spinners on the intermed states of the XHR
        
        then tell the request what it should look like
        
        Now that we've told the request to respond, our callback gets called.
        also specify responses ahead of time
        
         stubRequest with the url you want to return immediately. Then andReturn receives the same type of argument as respondWith
         
         If you only want to use it in a single spec, you can use withMock. withMock takes a function that will be called after ajax has been mocked, and the mock will be uninstalled when the function completes.
        
        
        Custom Boot
          --------------------
          / ~~~~~     ~~~~~ \
         /|     |     |\
         W   ---  / \  ---   W
         \.      |o o|      ./
          |                 |
          \    #########    /
           \  ## ----- ##  /
            \##         ##/
            ---------------
            
        
        ¶
        If you want to customize your jasmine environment you can customize your boot.js file.
        
        The core of boot.js should stay the same, but you can add new things to the interface or configure things by changing this file.
            
            
          
              -"""-.__
             /    '  \
            ;  '.  :  c
            "\._ ) ::-"
               ""m "
        
        Once the core jasmine interface has been loaded, you can add new functions or rewrite existing functions.
        , we're adding some aliases so before is the same as beforeEach
        s the same as afterEach
         context is the same as describe
          
          
        Adding a customer helper
              -"""-.__
             /    '  \
            ;  '.  :  c
            "\._ ) ::-"
               ""m "
        
        you  cand add yr custom reporter in addition or in place of jsApiReporter and htmlReporter
        you can also customize how specs are filtered from the current run by changing the env.specFilter function
        Alternately, specs to be run may also be specified after the tests have been parsed by passing an array of suite or spec IDs to the execute function. These IDs can be gleaned by traversing the tree of parsed tests accessible via env.topSuite().
        
        By default, Jasmine will begin execution when the onload event is triggered in the browser. Replace this portion, if you want to wait for something else before calling execute
        
        Helper function to add the Jasmine public interface to the correct object.
        
        
        
        Custom Equality
          --------------------
          / ~~~~~     ~~~~~ \
         /|     |     |\
         W   ---  / \  ---   W
         \.      |o o|      ./
          |                 |
          \    #########    /
           \  ## ----- ##  /
            \##         ##/
            ---------------
            
            
            
        Custom Equality Testers
          
              -"""-.__
             /    '  \
            ;  '.  :  c
            "\._ ) ::-"
               ""m "
            
        if it knows how to compare 2 itemns it should rtrn true or false
        when it returns undefined that means the custom et doesnt know how to compare it
        register a tester in the beforeEach
        if the custom tester returns false no other testing is done
        
        
        
        Custom Matcher
          --------------------
          / ~~~~~     ~~~~~ \
         /|     |     |\
         W   ---  / \  ---   W
         \.      |o o|      ./
          |                 |
          \    #########    /
           \  ## ----- ##  /
            \##         ##/
            ---------------
            
    a custom matcher is that method that is takes the expected value the method of an expect()
    
    
    
    Matcher Factories
          -"""-.__
         /    '  \
        ;  '.  :  c
        "\._ ) ::-"
           ""m "
           
    customer matcher fn are factories that get 2 args
    util:
    refer to https://github.com/jasmine/jasmine/blob/master/src/core/matchers/matchersUtil.js for a list
    customEqualityTesters, used only if util.equals is called
    it returns with a factory fn for your custom purpose
    
    
    Result
          -"""-.__
         /    '  \
        ;  '.  :  c
        "\._ ) ::-"
           ""m "
           
    compare fn must return an object which is the boolean result of the matcher in the "pass" property
    if an expact is chained with .not() it reverse whether the spec passes or fails the test
    
    
    Failure Messages
          -"""-.__
         /    '  \
        ;  '.  :  c
        "\._ ) ::-"
           ""m "
    
    if undefined the expectation will try to make a failure message
    if the return val has a message prop it will use that in message creation
           
           
    Custom negative comparisons
    
          -"""-.__
         /    '  \
        ;  '.  :  c
        "\._ ) ::-"
           ""m "
     
     include another key, negativeCompare alongside compare, for which the value is a function to invoke when .not is used. This function/key is optional.
     
     
    Custom negative comparisons
    
          -"""-.__
         /    '  \
        ;  '.  :  c
        "\._ ) ::-"
           ""m "
           
    register the  matcher with  jasmine.addMatchers(customMatchers);
    it will be availble for every expectation
               
    
        Custom Reporter
          --------------------
          / ~~~~~     ~~~~~ \
         /|     |     |\
         W   ---  / \  ---   W
         \.      |o o|      ./
          |                 |
          \    #########    /
           \  ## ----- ##  /
            \##         ##/
            ---------------
            
    its just an object with functions, hoever it never throws an error if you miss a listed function
    
            
    jasmineStarted
          -"""-.__
         /    '  \
        ;  '.  :  c
        "\._ ) ::-"
           ""m "
           
    a fn where all the specs are loaded but the suite test has not started
    suiteInfo contains all the info about the suite
           
           
    suiteStarted
          -"""-.__
         /    '  \
        ;  '.  :  c
        "\._ ) ::-"
           ""m "
           
    called when a describe starts to run
    
    
    specStarted
          -"""-.__
         /    '  \
        ;  '.  :  c
        "\._ ) ::-"
           ""m "
           
    when an it even before and after start to run
    
    
    specDone
          -"""-.__
         /    '  \
        ;  '.  :  c
        "\._ ) ::-"
           ""m "
           
    a reporter wont know if a spec has failed without this fn
    
    
    suiteDone
          -"""-.__
         /    '  \
        ;  '.  :  c
        "\._ ) ::-"
           ""m "
           
    all specs and child suites have run, a reporter also wont know if specs in the
    suite has failed
    
    
    
    jasmineDone
          -"""-.__
         /    '  \
        ;  '.  :  c
        "\._ ) ::-"
           ""m "
    
    when the entire suite has finished, a reporter needs to know about it
    
           
    Register the reporter with jasmine
          -"""-.__
         /    '  \
        ;  '.  :  c
        "\._ ) ::-"
           ""m "
           
    jasmine.getEnv().addReporter(myReporter);
            
            
            
        
        Jasmine API your version is 2.9
                      .....
                 .d$$$$*$$$$$$bc
              .d$P"    d$$    "*$$.
             d$"      4$"$$      "$$.
           4$P   /    $F ^$F    /   "$c
          z$%        d$   3$        ^$L
         4$$$$$$$$$$$$$$$$$$$$$$$$$$$$$F
         $$$F"""""""$F""""""$F"""""C$$*$
        .$%"$$e    d$       3$   z$$"  $F
        4$    *$$.4$"        $$d$P"    $$
        4$      ^*$$.       .d$F       $$
        4$   /   d$"$$c   z$$"3$    /  $F
         $L     4$"  ^*$$$P"   $$     4$"
         3$     $F   .d$P$$e   ^$F    $P
          $$   d$  .$$"    "$$c 3$   d$
           *$.4$"z$$"        ^*$$$$ $$
            "$$$$P"     /       "$$$P
              *$b.             .d$P"
                "$$$ec.....ze$$$"
                    "**$$$**""
        
        Global
        
                      v
               \             /
        
                  _________
         `       /         \      '
                /  \     /  \
               /             \
        _     /   _ _ . _ _   \    _
              \               /
               \             /
                \  /     \  /
         '       \_________/      `
        
        
               /             \
                      ^
        
        Methods
        
          --------------------
          / ~~~~~     ~~~~~ \
         /|     |     |\
         W   ---  / \  ---   W
         \.      |o o|      ./
          |                 |
          \    #########    /
           \  ## ----- ##  /
            \##         ##/
            ---------------
        

        afterAll
              -"""-.__
             /    '  \
            ;  '.  :  c
            "\._ ) ::-"
               ""m "
        
        
        afterAll(functionopt, timeoutopt)
        Run some shared teardown once after all of the specs in the describe are run.
        
        Note: Be careful, sharing the teardown from a afterAll makes it easy to accidentally leak state between your specs so that they erroneously pass or fail.
        
        Parameters:
        Name	Type	Attributes	Default	Description
        function	implementationCallback	<optional>
        Function that contains the code to teardown your specs.
        
        timeout	Int	<optional>
        jasmine.DEFAULT_TIMEOUT_INTERVAL
        Custom timeout for an async afterAll.
        
        
        afterEach(functionopt, timeoutopt)
        Run some shared teardown after each of the specs in the describe in which it is called.
        
        Parameters:
        Name	Type	Attributes	Default	Description
        function	implementationCallback	<optional>
        Function that contains the code to teardown your specs.
        
        timeout	Int	<optional>
        jasmine.DEFAULT_TIMEOUT_INTERVAL
        Custom timeout for an async afterEach.
        
        
        beforeAll(functionopt, timeoutopt)
        Run some shared setup once before all of the specs in the describe are run.
        
        Note: Be careful, sharing the setup from a beforeAll makes it easy to accidentally leak state between your specs so that they erroneously pass or fail.
        
        Parameters:
        Name	Type	Attributes	Default	Description
        function	implementationCallback	<optional>
        Function that contains the code to setup your specs.
        
        timeout	Int	<optional>
        jasmine.DEFAULT_TIMEOUT_INTERVAL
        Custom timeout for an async beforeAll.
        
        
        beforeEach(functionopt, timeoutopt)
        Run some shared setup before each of the specs in the describe in which it is called.
        
        Parameters:
        Name	Type	Attributes	Default	Description
        function	implementationCallback	<optional>
        Function that contains the code to setup your specs.
        
        timeout	Int	<optional>
        jasmine.DEFAULT_TIMEOUT_INTERVAL
        Custom timeout for an async beforeEach.
        
        
        describe(description, specDefinitions)
        Create a group of specs (often called a suite).
        
        Calls to describe can be nested within other calls to compose your suite as a tree.
        
        Parameters:
        Name	Type	Description
        description	String
        Textual description of the group
        
        specDefinitions	function
        Function for Jasmine to invoke that will define inner suites and specs


        expect(actual) → {matchers}
        Create an expectation for a spec.
        
        Parameters:
        Name	Type	Description
        actual	Object
        Actual computed value to test expectations against.
        
        Returns:
        Type
        matchers
                
                
        fail(erroropt)
        Explicitly mark a spec as failed.
        
        Parameters:
        Name	Type	Attributes	Description
        error	String | Error	<optional>
        Reason for the failure.
        
                
        fdescribe(description, specDefinitions)
        A focused describe
        
        If suites or specs are focused, only those that are focused will be executed
        
        Parameters:
        Name	Type	Description
        description	String
        Textual description of the group
        
        specDefinitions	function
        Function for Jasmine to invoke that will define inner suites and specs
        
        See:
        fit
                


        fit(description, testFunction, timeoutopt)
        A focused it
        
        If suites or specs are focused, only those that are focused will be executed.
        
        Parameters:
        Name	Type	Attributes	Default	Description
        description	String
        Textual description of what this spec is checking.
        
        testFunction	implementationCallback
        Function that contains the code of your test.
        
        timeout	Int	<optional>
        jasmine.DEFAULT_TIMEOUT_INTERVAL
        Custom timeout for an async spec.
        
        
        it(description, testFunctionopt, timeoutopt)
        Define a single spec. A spec should contain one or more expectations that test the state of the code.
        
        A spec whose expectations all succeed will be passing and a spec with any failures will fail.
        
        Parameters:
        Name	Type	Attributes	Default	Description
        description	String
        Textual description of what this spec is checking
        
        testFunction	implementationCallback	<optional>
        Function that contains the code of your test. If not provided the test will be pending.
        
        timeout	Int	<optional>
        jasmine.DEFAULT_TIMEOUT_INTERVAL
        Custom timeout for an async spec.


        pending(messageopt)
        Mark a spec as pending, expectation results will be ignored.
        
        Parameters:
        Name	Type	Attributes	Description
        message	String	<optional>
        Reason the spec is pending.



        spyOn(obj, methodName) → {Spy}
        Install a spy onto an existing object.
        
        Parameters:
        Name	Type	Description
        obj	Object
        The object upon which to install the Spy.
        
        methodName	String
        The name of the method to replace with a Spy.
        
        Returns:
        Type
        Spy
        

        spyOnProperty(obj, propertyName, accessTypeopt) → {Spy}
        Install a spy on a property installed with Object.defineProperty onto an existing object.
        
        Parameters:
        Name	Type	Attributes	Default	Description
        obj	Object
        The object upon which to install the Spy
        
        propertyName	String
        The name of the property to replace with a Spy.
        
        accessType	String	<optional>
        get
        The access type (get|set) of the property to Spy on.
        
        Returns:
        Type
        Spy
        
        
        xdescribe(description, specDefinitions)
        A temporarily disabled describe
        
        Specs within an xdescribe will be marked pending and not executed
        
        Parameters:
        Name	Type	Description
        description	String
        Textual description of the group
        
        specDefinitions	function
        Function for Jasmine to invoke that will define inner suites and specs


        xit(description, testFunctionopt)
        A temporarily disabled it
        
        The spec will report as pending and will not be executed.
        
        Parameters:
        Name	Type	Attributes	Description
        description	String
        Textual description of what this spec is checking.
        
        testFunction	implementationCallback	<optional>
        Function that contains the code of your test. Will not be executed.
                
                
        Type Definitions
          --------------------
          / ~~~~~     ~~~~~ \
         /|     |     |\
         W   ---  / \  ---   W
         \.      |o o|      ./
          |                 |
          \    #########    /
           \  ## ----- ##  /
            \##         ##/
            ---------------
                        
                        
                        
        Expectation
              -"""-.__
             /    '  \
            ;  '.  :  c
            "\._ ) ::-"
               ""m "
               

+-------------+---------+-----------------------------------------------------------------+----------------------------------+
| Name        | Type    | Description                                                     |                                  |
+-------------+---------+-----------------------------------------------------------------+----------------------------------+
| matcherName | String  | The name of the matcher that was executed for this expectation. |                                  |
+-------------+---------+-----------------------------------------------------------------+----------------------------------+
| message     | String  | The failure message for the expectation.                        |                                  |
+-------------+---------+-----------------------------------------------------------------+----------------------------------+
| stack       | String  | The stack trace for the failure if available.                   |                                  |
+-------------+---------+-----------------------------------------------------------------+----------------------------------+
| passed      | Boolean | Whether the expectation passed or failed.                       |                                  |
+-------------+---------+-----------------------------------------------------------------+----------------------------------+
| expected    | Object  | "If the expectation failed                                      | what was the expected value."    |
+-------------+---------+-----------------------------------------------------------------+----------------------------------+
| actual      | Object  | "If the expectation failed                                      | what actual value was produced." |
+-------------+---------+-----------------------------------------------------------------+----------------------------------+




implementationCallback(doneopt)
        
              -"""-.__
             /    '  \
            ;  '.  :  c
            "\._ ) ::-"
               ""m "
               
Callback passed to parts of the Jasmine base interface.

By default Jasmine assumes this function completes synchronously. If you have code that you need to test asynchronously, you can declare that you receive a done callback, return a Promise, or use the async keyword if it is supported in your environment.
+------+----------+------------+------------------------------------------------+
| Name | Type     | Attributes | Description                                    |
+------+----------+------------+------------------------------------------------+
| done | function | <optional> | async callback jasmine should wait bfr moving. |
+------+----------+------------+------------------------------------------------+




JasmineDoneInfo
Information passed to the Reporter#jasmineDone event.

        
              -"""-.__
             /    '  \
            ;  '.  :  c
            "\._ ) ::-"
               ""m "

+--------------------+---------------------+--------------------------------------------------------------------------------+
| Name               | Type                | Description                                                                    |
+--------------------+---------------------+--------------------------------------------------------------------------------+
| order              | Order               | Information about the ordering (random or not) of this execution of the suite. |
+--------------------+---------------------+--------------------------------------------------------------------------------+
| failedExpectations | Array.<Expectation> | List of expectations that failed in an afterAll at the global level.           |
+--------------------+---------------------+--------------------------------------------------------------------------------+


JasmineStartedInfo
Information passed to the Reporter#jasmineStarted event.
        
              -"""-.__
             /    '  \
            ;  '.  :  c
            "\._ ) ::-"
               ""m "

+-------------------+-------+--------------------------------------------------------------------------------+
| Name              | Type  | Description                                                                    |
+-------------------+-------+--------------------------------------------------------------------------------+
| totalSpecsDefined | Int   | The total number of specs defined in this suite.                               |
+-------------------+-------+--------------------------------------------------------------------------------+
| order             | Order | Information about the ordering (random or not) of this execution of the suite. |
+-------------------+-------+--------------------------------------------------------------------------------+



SpecInfo
        
              -"""-.__
             /    '  \
            ;  '.  :  c
            "\._ ) ::-"
               ""m "

+--------------------+---------------------+---------------------------------------------------------------------------------------+
| Name               | Type                | Description                                                                           |
+--------------------+---------------------+---------------------------------------------------------------------------------------+
| id                 | Int                 | The unique id of this spec.                                                           |
+--------------------+---------------------+---------------------------------------------------------------------------------------+
| description        | String              | The description passed to the it that created this spec.                              |
+--------------------+---------------------+---------------------------------------------------------------------------------------+
| fullName           | String              | The full description including all ancestors of this spec.                            |
+--------------------+---------------------+---------------------------------------------------------------------------------------+
| failedExpectations | Array.<Expectation> | The list of expectations that failed during execution of this spec.                   |
+--------------------+---------------------+---------------------------------------------------------------------------------------+
| passedExpectations | Array.<Expectation> | The list of expectations that passed during execution of this spec.                   |
+--------------------+---------------------+---------------------------------------------------------------------------------------+
| pendingReason      | String              | If the spec is pending this will be the reason.                                       |
+--------------------+---------------------+---------------------------------------------------------------------------------------+
| status             | String              | Once the spec has completed this string represents the pass/fail status of this spec. |
+--------------------+---------------------+---------------------------------------------------------------------------------------+


SuiteResult
              -"""-.__
             /    '  \
            ;  '.  :  c
            "\._ ) ::-"
               ""m "


+--------------------+---------------------+-----------------------------------------------------------------------------------------+
| Name               | Type                | Description                                                                             |
+--------------------+---------------------+-----------------------------------------------------------------------------------------+
| id                 | Int                 | The unique id of this suite.                                                            |
+--------------------+---------------------+-----------------------------------------------------------------------------------------+
| description        | String              | The description text passed to the describe that made this suite.                       |
+--------------------+---------------------+-----------------------------------------------------------------------------------------+
| fullName           | String              | The full description including all ancestors of this suite.                             |
+--------------------+---------------------+-----------------------------------------------------------------------------------------+
| failedExpectations | Array.<Expectation> | The list of expectations that failed in an afterAll for this suite.                     |
+--------------------+---------------------+-----------------------------------------------------------------------------------------+
| status             | String              | Once the suite has completed this string represents the pass/fail status of this suite. |
+--------------------+---------------------+-----------------------------------------------------------------------------------------+



        Classes
        
                      v
               \             /
        
                  _________
         `       /         \      '
                /  \     /  \
               /             \
        _     /   _ _ . _ _   \    _
              \               /
               \             /
                \  /     \  /
         '       \_________/      `
        
        
               /             \
                      ^
        
        Clock
        
        this is Jasmine mock clock used for testing time dependent code
        
        the constructor is new Clock() but  dont do this there should be only one clock and jasmine makes this at boot
        
          --------------------
          / ~~~~~     ~~~~~ \
         /|     |     |\
         W   ---  / \  ---   W
         \.      |o o|      ./
          |                 |
          \    #########    /
           \  ## ----- ##  /
            \##         ##/
            ---------------
            
            
        
              -"""-.__
             /    '  \
            ;  '.  :  c
            "\._ ) ::-"
               ""m "
               
                       
        install() → {Clock}
        Install the mock clock over the built-in methods.

    
        mockDate(initialDateopt)
        Instruct the installed Clock to also mock the date returned by new Date()
        
        
        +-------------+------+------------+---------+----------------------+
        | Name        | Type | Attributes | Default | Description          |
        +-------------+------+------------+---------+----------------------+
        | initialDate | Date | <optional> | now     | The Date to provide. |
        +-------------+------+------------+---------+----------------------+
        
        
        tick(millis)
        Tick the Clock forward, running any enqueued timeouts along the way

        +--------+------+-------------------------------------+
        | Name   | Type | Description                         |
        +--------+------+-------------------------------------+
        | millis | int  | The number of milliseconds to tick. |
        +--------+------+-------------------------------------+
                       
        uninstall()
        Uninstall the mock clock, returning the built-in methods to their places.
        
        
        withMock(Function)
        Execute a function with a mocked Clock
        
        The clock will be installed before the function is called and uninstalled in a finally after the function completes.
        
        
        Env
        
        the jasmine env
        
        jasmine will make one during booting
        
        you access with jasmine.Env()
        
          --------------------
          / ~~~~~     ~~~~~ \
         /|     |     |\
         W   ---  / \  ---   W
         \.      |o o|      ./
          |                 |
          \    #########    /
           \  ## ----- ##  /
            \##         ##/
            ---------------
            
        addReporter(reporterToAdd)
        with  the type of reporter
                    
                    
        jsApiReporter
        
        the actual one is made by default in boot.js an instance is made availble as jsApiReporter on the global object
        
          --------------------
          / ~~~~~     ~~~~~ \
         /|     |     |\
         W   ---  / \  ---   W
         \.      |o o|      ./
          |                 |
          \    #########    /
           \  ## ----- ##  /
            \##         ##/
            ---------------
            
            
        executionTime() full # of ms for jasime to run
        
        
        specResults(index, length) → {Array.<SpecResult>} get a list of specs
        
        +--------+--------+-----------------------------------------------+
        | Name   | Type   | Description                                   |
        +--------+--------+-----------------------------------------------+
        | index  | Number | The position in the specs list to start from. |
        +--------+--------+-----------------------------------------------+
        | length | Number | Maximum number of specs results to return.    |
        +--------+--------+-----------------------------------------------+
        
        
        specs() → {Array.<SpecResult>}
        Get all spec results.
                        
                
        status() → {String}
        Get the current status for the Jasmine environment.
        
        loaded, started, or done.
        
        
        suiteResults(index, length) → {Array.<SuiteResult>}
                
        +--------+--------+------------------------------------------------+
        | Name   | Type   | Description                                    |
        +--------+--------+------------------------------------------------+
        | index  | Number | The position in the suites list to start from. |
        +--------+--------+------------------------------------------------+
        | length | Number | Maximum number of suite results to return.     |
        +--------+--------+------------------------------------------------+
        
        
        suites() → {Object}
        Get all of the suites in a single object, with their id as the key.
        
        Returns:
        Map of suite id to SuiteResult
        Type
        Object
        
        
        Spy()
        
        helps watch fns for testing
        
        use spyOn, spyOnProperty, jasmine.createSpy, or jasmine.createSpyObj
        
        refer on the documentation for spy
        
          --------------------
          / ~~~~~     ~~~~~ \
         /|     |     |\
         W   ---  / \  ---   W
         \.      |o o|      ./
          |                 |
          \    #########    /
           \  ## ----- ##  /
            \##         ##/
            ---------------
            
        +-----------------+--------+-------------------------------------------+
        | Name            | Type   | Description                               |
        +-----------------+--------+-------------------------------------------+
        | object          | object | this context for the invocation.          |
        +-----------------+--------+-------------------------------------------+
        | invocationOrder | number | Order of the invocation.                  |
        +-----------------+--------+-------------------------------------------+
        | args            | Array  | The arguments passed for this invocation. |
        +-----------------+--------+-------------------------------------------+
        
        

        Namespaces
        
                      v
               \             /
        
                  _________
         `       /         \      '
                /  \     /  \
               /             \
        _     /   _ _ . _ _   \    _
              \               /
               \             /
                \  /     \  /
         '       \_________/      `
        
        
               /             \
                      ^
                      
                      
        jasmine
          --------------------
          / ~~~~~     ~~~~~ \
         /|     |     |\
         W   ---  / \  ---   W
         \.      |o o|      ./
          |                 |
          \    #########    /
           \  ## ----- ##  /
            \##         ##/
            ---------------
            
        properties
              -"""-.__
             /    '  \
            ;  '.  :  c
            "\._ ) ::-"
               ""m "
                         
(static) DEFAULT_TIMEOUT_INTERVAL
Default number of milliseconds Jasmine will wait for an asynchronous spec to complete.

(static) MAX_PRETTY_PRINT_ARRAY_LENGTH
Maximum number of array elements to display when pretty printing objects. This will also limit the number of keys and values displayed for an object. Elements past this number will be ellipised.

(static) MAX_PRETTY_PRINT_CHARS
Maximum number of charasters to display when pretty printing objects. Characters past this number will be ellipised.

(static) MAX_PRETTY_PRINT_DEPTH
Maximum object depth the pretty printer will print to. Set this to a lower value to speed up pretty printing if you have large objects.
                            
                              
(static) addCustomEqualityTester(tester)
Add a custom equality tester for the current scope of specs.

Note: This is only callable from within a beforeEach, it, or beforeAll.

A function which takes two arguments to compare and returns a true or false comparison result if it knows how to compare them, and undefined if it doesnt.

(static) addMatchers(matchers)
Add custom matchers for the current scope of specs.

Note: This is only callable from within a beforeEach, it, or beforeAll.


(static) addMatchers(matchers)
Add custom matchers for the current scope of specs.

Note: This is only callable from within a beforeEach, it, or beforeAll.

the matchers are object with keys as matches and values as the actual matcher



(static) any(class)
Get a matcher, usable in any matcher that uses Jasmine's equality (e.g. toEqual, toContain, or toHaveBeenCalledWith), that will succeed if the actual value being compared is an instance of the specified class/constructor.

class, the constructor to check against


(static) anything()
Get a matcher, usable in any matcher that uses Jasmine's equality (e.g. toEqual, toContain, or toHaveBeenCalledWith), that will succeed if the actual value being compared is not null and not undefined.


(static) arrayContaining(sample)
Get a matcher, usable in any matcher that uses Jasmine's equality (e.g. toEqual, toContain, or toHaveBeenCalledWith), that will succeed if the actual value is an Array that contains at least the elements in the sample.


(static) arrayWithExactContents(sample)
Get a matcher, usable in any matcher that uses Jasmine's equality (e.g. toEqual, toContain, or toHaveBeenCalledWith), that will succeed if the actual value is an Array that contains all of the elements in the sample in any order.


(static) clock() → {Clock}

Get the currently booted mock {Clock} for this Jasmine environment.


(static) createSpy(nameopt, originalFnopt) → {Spy}
Create a bare Spy object. This won't be installed anywhere and will not have any implementation behind it.

+------------+----------+------------+-------------------------------------------------------------------+
| Name       | Type     | Attributes | Description                                                       |
+------------+----------+------------+-------------------------------------------------------------------+
| name       | String   | <optional> | Name to give the spy. This will be displayed in failure messages. |
+------------+----------+------------+-------------------------------------------------------------------+
| originalFn | function | <optional> | Function to act as the real implementation.                       |
+------------+----------+------------+-------------------------------------------------------------------+


(static) createSpyObj(baseNameopt, methodNames) → {Object}
Create an object with multiple Spys as its members.



| Name        | Type                    | Attributes | Description |
+-------------+-------------------------+------------+--------------------------------------------------------------------------------
| baseName    | String                  | <optional> | Base name for the spies in the object.|
+-------------+-------------------------+------------+---------------------------------------------------------------------------------------------+
| methodNames | Array.<String> | Object |            |Array of methodNames create spies or Object keys = methodNames value = returnVal |
+-------------+-------------------------+------------+--------------------------------------------------------------------------------

(static) getEnv() → {Env}
Get the currently booted Jasmine Environment.


(static) objectContaining(sample)
Get a matcher, usable in any matcher that uses Jasmine's equality (e.g. toEqual, toContain, or toHaveBeenCalledWith), that will succeed if the actual value being compared contains at least the keys and values.

sample is the object subset of keys and values as a pair that must be contained in the actual


(static) stringMatching(expected)

succeed if actual matches the RegExp or String



                      
        matchers
          --------------------
          / ~~~~~     ~~~~~ \
         /|     |     |\
         W   ---  / \  ---   W
         \.      |o o|      ./
          |                 |
          \    #########    /
           \  ## ----- ##  /
            \##         ##/
            ---------------
            
nothing()
expect nothing explicitly.

ex
expect().nothing();




toBe(expected)
expect the actual value to be === to the expected value.
where thing is an object
try to avoid testing for obj matches

ex
expect(thing).toBe(realThing);

              -"""-.__
             /    '  \
            ;  '.  :  c
            "\._ ) ::-"
               ""m "
        

toBeDefined()
expect the actual not to be undefined

ex
expect(result).toBeDefined();


              -"""-.__
             /    '  \
            ;  '.  :  c
            "\._ ) ::-"
               ""m "
        
        
toBeFalsy()
toBeTruthy()
expect actual to type convert to true|false

ex
expect(result).toBeFalsy();
expect(result).toBeTruthy();

              -"""-.__
             /    '  \
            ;  '.  :  c
            "\._ ) ::-"
               ""m "
        

toBeGreaterThan(expected)
toBeGreaterThanOrEqual(expected)
toBeLessThan(expected)
toBeLessThanOrEqual(expected)
expect actual > expected
expected is a ##

ex
expect(result).toBeGreaterThan(3);

              -"""-.__
             /    '  \
            ;  '.  :  c
            "\._ ) ::-"
               ""m "
        


toBeNaN()
expect to not be a ##


expect(thing).toBeNaN();


toBeNegativeInfinity()
toBePositiveInfinity()

              -"""-.__
             /    '  \
            ;  '.  :  c
            "\._ ) ::-"
               ""m "
        

toBeNull()
expect value to be null only

expect(result).toBeNull();

              -"""-.__
             /    '  \
            ;  '.  :  c
            "\._ ) ::-"
               ""m "
        

toBeUndefined()
expect val to be undefined only

expect(result).toBeUndefined();

              -"""-.__
             /    '  \
            ;  '.  :  c
            "\._ ) ::-"
               ""m "
        


toContain(expected)
actual val to contain a specific val

ex
expect(array).toContain(anElement);
expect(string).toContain(substring);


              -"""-.__
             /    '  \
            ;  '.  :  c
            "\._ ) ::-"
               ""m "
        

toEqual(expected)
expect the actual value to be equal to the expected, using deep equality comparison.

expected
expect(bigObject).toEqual({"foo": ['bar', 'baz']});

              -"""-.__
             /    '  \
            ;  '.  :  c
            "\._ ) ::-"
               ""m "
        


toHaveBeenCalled()
expect the actual (a Spy) to have been called.


expect(mySpy).toHaveBeenCalled();
expect(mySpy).not.toHaveBeenCalled();

              -"""-.__
             /    '  \
            ;  '.  :  c
            "\._ ) ::-"
               ""m "
        



toHaveBeenCalledBefore(expected)
expect the actual value (a Spy) to have been called before another Spy.



expect(mySpy).toHaveBeenCalledBefore(otherSpy);

              -"""-.__
             /    '  \
            ;  '.  :  c
            "\._ ) ::-"
               ""m "
        

toHaveBeenCalledTimes(expected)

spy was called x amnt of times

expected is # of invocations to look fr

expect(mySpy).toHaveBeenCalledTimes(3);


              -"""-.__
             /    '  \
            ;  '.  :  c
            "\._ ) ::-"
               ""m "
        

toHaveBeenCalledWith()
expect the actual (a Spy) to have been called with particular arguments at least once.

expect(mySpy).toHaveBeenCalledWith('foo', 'bar', 2);


              -"""-.__
             /    '  \
            ;  '.  :  c
            "\._ ) ::-"
               ""m "
        
        
        
toMatch(expected)
expect the actual value to match a regular expression or string


expect("my string").toMatch(/string$/);
expect("other string").toMatch("her");


              -"""-.__
             /    '  \
            ;  '.  :  c
            "\._ ) ::-"
               ""m "
        

toThrow(expectedopt)
check if a functions retruns, if theres a value it will check if the fn throws an error
if this doesnt work try returns

expect(function() { return 'things'; }).toThrow('foo');
expect(function() { return 'stuff'; }).toThrow();




              -"""-.__
             /    '  \
            ;  '.  :  c
            "\._ ) ::-"
               ""m "
        
toThrowError(expectedopt, messageopt)
expect a function to throw an Error.

╔══════════╦═════════════════╦════════════╦═══════════════════════════════════════════════════════════════════════════════════════════╦══════════════════════╗
║ Name     ║ Type            ║ Attributes ║ Description                                                                               ║                      ║
╠══════════╬═════════════════╬════════════╬═══════════════════════════════════════════════════════════════════════════════════════════╬══════════════════════╣
║ expected ║ Error           ║ <optional> ║ "Error constructor the object that was thrown needs to be an instance of. If not provided ║ Error will be used." ║
╠══════════╬═════════════════╬════════════╬═══════════════════════════════════════════════════════════════════════════════════════════╬══════════════════════╣
║ message  ║ RegExp | String ║ <optional> ║ The message that should be set on the thrown Error                                        ║                      ║
╚══════════╩═════════════════╩════════════╩═══════════════════════════════════════════════════════════════════════════════════════════╩══════════════════════╝

expect(function() { return 'things'; }).toThrowError(MyCustomError, 'message');
expect(function() { return 'things'; }).toThrowError(MyCustomError, /bar/);
expect(function() { return 'stuff'; }).toThrowError(MyCustomError);
expect(function() { return 'other'; }).toThrowError(/foo/);
expect(function() { return 'other'; }).toThrowError();



        Spy#and
          --------------------
          / ~~~~~     ~~~~~ \
         /|     |     |\
         W   ---  / \  ---   W
         \.      |o o|      ./
          |                 |
          \    #########    /
           \  ## ----- ##  /
            \##         ##/
            ---------------
            


callFake(fn)
tell the spy to call a fake implemetation

              -"""-.__
             /    '  \
            ;  '.  :  c
            "\._ ) ::-"
               ""m "
        

callThrough()
Tell the spy to call through to the real implementation when invoked.

              -"""-.__
             /    '  \
            ;  '.  :  c
            "\._ ) ::-"
               ""m "
        
        
exec()
Execute the current spy strategy


              -"""-.__
             /    '  \
            ;  '.  :  c
            "\._ ) ::-"
               ""m "
               
               
identity() → {String}
Return the identifying information for the spy.


              -"""-.__
             /    '  \
            ;  '.  :  c
            "\._ ) ::-"
               ""m "
               
               
returnValue(value)
Tell the spy to return the value when invoked.


              -"""-.__
             /    '  \
            ;  '.  :  c
            "\._ ) ::-"
               ""m "


returnValues(…values)
Tell the spy to return one of the specified values (sequentially) each time the spy is invoked.


              -"""-.__
             /    '  \
            ;  '.  :  c
            "\._ ) ::-"
               ""m "


stub()
Tell the spy to do nothing when invoked. This is the default.



              -"""-.__
             /    '  \
            ;  '.  :  c
            "\._ ) ::-"
               ""m "


throwError(something)
Tell the spy to throw an error when invoked.

must be error or string




        Spy#calls
          --------------------
          / ~~~~~     ~~~~~ \
         /|     |     |\
         W   ---  / \  ---   W
         \.      |o o|      ./
          |                 |
          \    #########    /
           \  ## ----- ##  /
            \##         ##/
            ---------------
            
            

all() → {Array.<Spy.callData>}
Get the raw calls array for this spy.


              -"""-.__
             /    '  \
            ;  '.  :  c
            "\._ ) ::-"
               ""m "
               
               
allArgs() → {Array}
Get all of the arguments for each invocation of this spy in the order they were received.



              -"""-.__
             /    '  \
            ;  '.  :  c
            "\._ ) ::-"
               ""m "
               
               
               
any() → {Boolean}
Check whether this spy has been invoked.


              -"""-.__
             /    '  \
            ;  '.  :  c
            "\._ ) ::-"
               ""m "
               
               
count() → {Integer}
Get the number of invocations of this spy.

              -"""-.__
             /    '  \
            ;  '.  :  c
            "\._ ) ::-"
               ""m "

argsFor(index) → {Array}
Get the arguments that were passed to a specific invocation of this spy.



              -"""-.__
             /    '  \
            ;  '.  :  c
            "\._ ) ::-"
               ""m "

first() → {ObjecSpy.callData}
Get the first invocation of this spy.


              -"""-.__
             /    '  \
            ;  '.  :  c
            "\._ ) ::-"
               ""m "


mostRecent() → {ObjecSpy.callData}
Get the most recent invocation of this spy

              -"""-.__
             /    '  \
            ;  '.  :  c
            "\._ ) ::-"
               ""m "


reset()
Reset this spy as if it has never been called.

              -"""-.__
             /    '  \
            ;  '.  :  c
            "\._ ) ::-"
               ""m "


saveArgumentsByValue()
Set this spy to do a shallow clone of arguments passed to each invocation.



               

    Interfaces
                      v
               \             /
        
                  _________
         `       /         \      '
                /  \     /  \
               /             \
        _     /   _ _ . _ _   \    _
              \               /
               \             /
                \  /     \  /
         '       \_________/      `
        
        
               /             \
                      ^
                      
        Reporter
          --------------------
          / ~~~~~     ~~~~~ \
         /|     |     |\
         W   ---  / \  ---   W
         \.      |o o|      ./
          |                 |
          \    #########    /
           \  ## ----- ##  /
            \##         ##/
            ---------------
all these objects these fn need are in the global section :)
            

jasmineDone(suiteInfo)
When the entire suite has finished execution jasmineDone is called

suiteInfo = jasmineDoneInfo

              -"""-.__
             /    '  \
            ;  '.  :  c
            "\._ ) ::-"
               ""m "
               
jasmineStarted(suiteInfo)
jasmineStarted is called after all of the specs have been loaded, but just before execution starts.


              -"""-.__
             /    '  \
            ;  '.  :  c
            "\._ ) ::-"
               ""m "
               
suiteInfo = jasmineStartedInfo


specDone(result)
specDone is invoked when an it and its associated beforeEach and afterEach functions have been run.
result = specResult


specStarted(result)
specStarted is invoked when an it starts to run (including associated beforeEach functions)

               
result	= SpecResult
               
               
              -"""-.__
             /    '  \
            ;  '.  :  c
            "\._ ) ::-"
               ""m "
               

suiteDone(result)
suiteDone is invoked when all of the child specs and suites for a given suite have been run

result = SuiteResult

              -"""-.__
             /    '  \
            ;  '.  :  c
            "\._ ) ::-"
               ""m "
               
suiteStarted(result)
suiteStarted is invoked when a describe starts to run


result = SuiteResult


              -"""-.__
             /    '  \
            ;  '.  :  c
            "\._ ) ::-"
               ""m "